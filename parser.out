Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> expr
Rule 2     expr -> expr + expr
Rule 3     expr -> expr - expr
Rule 4     expr -> - expr
Rule 5     expr -> expr * expr
Rule 6     expr -> expr / expr
Rule 7     expr -> ( expr )
Rule 8     expr -> NUMBER

Terminals, with rules where they appear

(                    : 7
)                    : 7
*                    : 5
+                    : 2
-                    : 3 4
/                    : 6
NUMBER               : 8
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 2 3 3 4 5 5 6 6 7
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expr
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    start                          shift and go to state 4
    expr                           shift and go to state 1

state 1

    (1) start -> expr .
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    $end            reduce using rule 1 (start -> expr .)
    +               shift and go to state 6
    -               shift and go to state 8
    *               shift and go to state 7
    /               shift and go to state 9


state 2

    (4) expr -> - . expr
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expr                           shift and go to state 10

state 3

    (8) expr -> NUMBER .

    )               reduce using rule 8 (expr -> NUMBER .)
    +               reduce using rule 8 (expr -> NUMBER .)
    -               reduce using rule 8 (expr -> NUMBER .)
    *               reduce using rule 8 (expr -> NUMBER .)
    /               reduce using rule 8 (expr -> NUMBER .)
    $end            reduce using rule 8 (expr -> NUMBER .)


state 4

    (0) S' -> start .



state 5

    (7) expr -> ( . expr )
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expr                           shift and go to state 11

state 6

    (2) expr -> expr + . expr
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expr                           shift and go to state 12

state 7

    (5) expr -> expr * . expr
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expr                           shift and go to state 13

state 8

    (3) expr -> expr - . expr
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expr                           shift and go to state 14

state 9

    (6) expr -> expr / . expr
    (2) expr -> . expr + expr
    (3) expr -> . expr - expr
    (4) expr -> . - expr
    (5) expr -> . expr * expr
    (6) expr -> . expr / expr
    (7) expr -> . ( expr )
    (8) expr -> . NUMBER

    -               shift and go to state 2
    (               shift and go to state 5
    NUMBER          shift and go to state 3

    expr                           shift and go to state 15

state 10

    (4) expr -> - expr .
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    )               reduce using rule 4 (expr -> - expr .)
    +               reduce using rule 4 (expr -> - expr .)
    -               reduce using rule 4 (expr -> - expr .)
    *               reduce using rule 4 (expr -> - expr .)
    /               reduce using rule 4 (expr -> - expr .)
    $end            reduce using rule 4 (expr -> - expr .)

  ! +               [ shift and go to state 6 ]
  ! -               [ shift and go to state 8 ]
  ! *               [ shift and go to state 7 ]
  ! /               [ shift and go to state 9 ]


state 11

    (7) expr -> ( expr . )
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    )               shift and go to state 16
    +               shift and go to state 6
    -               shift and go to state 8
    *               shift and go to state 7
    /               shift and go to state 9


state 12

    (2) expr -> expr + expr .
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    )               reduce using rule 2 (expr -> expr + expr .)
    +               reduce using rule 2 (expr -> expr + expr .)
    -               reduce using rule 2 (expr -> expr + expr .)
    $end            reduce using rule 2 (expr -> expr + expr .)
    *               shift and go to state 7
    /               shift and go to state 9

  ! *               [ reduce using rule 2 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 2 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 6 ]
  ! -               [ shift and go to state 8 ]


state 13

    (5) expr -> expr * expr .
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    )               reduce using rule 5 (expr -> expr * expr .)
    +               reduce using rule 5 (expr -> expr * expr .)
    -               reduce using rule 5 (expr -> expr * expr .)
    *               reduce using rule 5 (expr -> expr * expr .)
    /               reduce using rule 5 (expr -> expr * expr .)
    $end            reduce using rule 5 (expr -> expr * expr .)

  ! +               [ shift and go to state 6 ]
  ! -               [ shift and go to state 8 ]
  ! *               [ shift and go to state 7 ]
  ! /               [ shift and go to state 9 ]


state 14

    (3) expr -> expr - expr .
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    )               reduce using rule 3 (expr -> expr - expr .)
    +               reduce using rule 3 (expr -> expr - expr .)
    -               reduce using rule 3 (expr -> expr - expr .)
    $end            reduce using rule 3 (expr -> expr - expr .)
    *               shift and go to state 7
    /               shift and go to state 9

  ! *               [ reduce using rule 3 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 3 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 6 ]
  ! -               [ shift and go to state 8 ]


state 15

    (6) expr -> expr / expr .
    (2) expr -> expr . + expr
    (3) expr -> expr . - expr
    (5) expr -> expr . * expr
    (6) expr -> expr . / expr

    )               reduce using rule 6 (expr -> expr / expr .)
    +               reduce using rule 6 (expr -> expr / expr .)
    -               reduce using rule 6 (expr -> expr / expr .)
    *               reduce using rule 6 (expr -> expr / expr .)
    /               reduce using rule 6 (expr -> expr / expr .)
    $end            reduce using rule 6 (expr -> expr / expr .)

  ! +               [ shift and go to state 6 ]
  ! -               [ shift and go to state 8 ]
  ! *               [ shift and go to state 7 ]
  ! /               [ shift and go to state 9 ]


state 16

    (7) expr -> ( expr ) .

    )               reduce using rule 7 (expr -> ( expr ) .)
    +               reduce using rule 7 (expr -> ( expr ) .)
    -               reduce using rule 7 (expr -> ( expr ) .)
    *               reduce using rule 7 (expr -> ( expr ) .)
    /               reduce using rule 7 (expr -> ( expr ) .)
    $end            reduce using rule 7 (expr -> ( expr ) .)

